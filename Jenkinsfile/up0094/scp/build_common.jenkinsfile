import groovy.transform.Field
@Library('jenkins-library@develop') _
def label = "buildah"
def  platformEnvName     = "${PLATFORM_ENV_NAME}"
def  deploymentEnvName   = "${DEPLOYMENT_ENV_NAME}"
@Field def final String  platformProjectName
platformProjectName="${PLATFORM_PROJECT_NAME}"
@Field def final String  appSystemId
appSystemId          = "${platformProjectName}".split("-")[0]
@Field def final String  appProjectName
appProjectName       = "${platformProjectName}".split("-")[1]

@Field def final String  scmProjectName
scmProjectName  ="${SCM_PROJECT_NAME}"


def templateNev(final String envName,final String configValue) {     
    def variableTextPath = libraryResource "variableDefinition/variable.yaml"
    def variableTextContent = readYaml text: variableTextPath  
    def variableValue=variableTextContent[envName][configValue]
    if(variableValue instanceof String){
        variableValue=variableValue.replace('${platformProjectName}', platformProjectName)
        variableValue=variableValue.replace('${appProjectName}', appProjectName)
        variableValue=variableValue.replace('${appSystemId}', appSystemId)
        variableValue=variableValue.replace('${scmProjectName}', scmProjectName)
    }
    return variableValue
}



//define and load a global variable 
def pipelineConfigTextPath = templateNev(platformEnvName.toString(),"pipelineConfigTextPath")

def  yamlTemplateDir =   templateNev(platformEnvName.toString(),"yamlTemplateDir")

def  scmUrl        =templateNev(platformEnvName.toString(),"scmUrl")

def prodScmUrlDevOps =templateNev(platformEnvName.toString(),"prodScmUrlDevOps")
def serverPrefix = templateNev(platformEnvName.toString(),"serverPrefix")
def _backendSource = templateNev(platformEnvName.toString(),"_backendSource")
podTemplate(label: label, cloud: 'kubernetes') {
    node(label) {
        stage('git'){
            git branch: 'develop', url: 'https://uegi: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@github.com/Uegi/jenkinsTest.git'
        }
        stage('copy') {
            sh("""
                mkdir -p /home/jenkins/artifact/deployments/helm-yaml
                cp -R ./yaml-template/helm-yaml /home/jenkins/artifact/deployments
                ls /home/jenkins/artifact/deployments
                echo ${_backendSource}
            """)
        }
         stage('test') {
           editHelmValue()
        }
    }
}

def editHelmValue() {     
    dir('/home/jenkins/artifact/deployments/helm-yaml'){
        def t1= 1
        def t2='2'
        def t3=' -XX:HeapDumpPath=/deployments/log/\$(POD_NAME)-heap.hprof -Xloggc:/deployment/log'
        def t4='false'
        def t5="true"
        def yamlConfig = readYaml file: './values.yaml'
        yamlConfig.build_number= "${t1}"
        yamlConfig.actuator_port= t2 as Integer
        yamlConfig.apm_configuration_name= t3.toString()
        yamlConfig.app_major_version= t4.toBoolean()
        yamlConfig.app_name= t5.toBoolean()
        yamlConfig.platform_project_name="${platformProjectName}"
        def updatedYaml = writeYaml returnText: true, data: yamlConfig
        writeFile file: './values.yaml', text: updatedYaml
        sh "cat ./values.yaml"
    }
}