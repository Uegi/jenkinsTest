import groovy.transform.Field
@Library('jenkins-library@develop') _
def label = "buildah"
def  platformEnvName     = "${PLATFORM_ENV_NAME}"
def  deploymentEnvName   = "${DEPLOYMENT_ENV_NAME}"
@Field def final String  platformProjectName
platformProjectName="${PLATFORM_PROJECT_NAME}"
@Field def final String  appSystemId
appSystemId          = "${platformProjectName}".split("-")[0]
@Field def final String  appProjectName
appProjectName       = "${platformProjectName}".split("-")[1]

@Field def final String  scmProjectName
scmProjectName  ="${SCM_PROJECT_NAME}"

def templateNev(final String envName,final String configValue) {       
    def variableTextPath = libraryResource "variableDefinition/test.yaml"
    def variableTextContent = readYaml text: variableTextPath
    def variableValue=variableTextContent[envName][configValue]
    if(configValue =="pipelineConfigTextPath"){
        variableValue=variableValue.replace('${platformProjectName}', platformProjectName)
    }
    if(configValue =="yamlTemplateDir" && (envName in ["prod1","prod2","dr1"])){
        variableValue=variableValue.replace('${appProjectName}', appProjectName)
    }
    if(configValue =="scmUrl"){
        variableValue=variableValue.replace('${appSystemId}', appSystemId)
        variableValue=variableValue.replace('${scmProjectName}', scmProjectName)
    }

    return variableValue
}



// define and load a global variable 
@Field final def String pipelineConfigTextPath
pipelineConfigTextPath = templateNev(platformEnvName.toString(),"pipelineConfigTextPath")

def  yamlTemplateDir =   templateNev(platformEnvName.toString(),"yamlTemplateDir")

def  scmUrl        =templateNev(platformEnvName.toString(),"scmUrl")

def prodScmUrlDevOps =templateNev(platformEnvName.toString(),"prodScmUrlDevOps")

podTemplate(label: label, cloud: 'kubernetes') {
    node(label) {
        stage('copy') {
            sh("""
                cp -R /jenkinsTest/yaml-template/helm-yaml /home/jenkins/artifact/deployments
                ls /home/jenkins/artifact/deployments
            """)
        }
    }
}